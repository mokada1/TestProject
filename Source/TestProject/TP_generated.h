// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TP_H_
#define FLATBUFFERS_GENERATED_TP_H_

#include "flatbuffers/flatbuffers.h"

struct ST_Vec3;

struct TB_CompUserTransform;
struct TB_CompUserTransformBuilder;

struct TB_CompUserCondition;
struct TB_CompUserConditionBuilder;

struct TB_ObjUser;
struct TB_ObjUserBuilder;

struct TB_InputMove;
struct TB_InputMoveBuilder;

struct TB_InputAction;
struct TB_InputActionBuilder;

struct TB_ReqLogin;
struct TB_ReqLoginBuilder;

struct TB_ReqMove;
struct TB_ReqMoveBuilder;

struct TB_ReqLocationSync;
struct TB_ReqLocationSyncBuilder;

struct TB_ReqRoundTripTime;
struct TB_ReqRoundTripTimeBuilder;

struct TB_ReqAction;
struct TB_ReqActionBuilder;

struct TB_ReqDamage;
struct TB_ReqDamageBuilder;

struct TB_ReqRotate;
struct TB_ReqRotateBuilder;

struct TB_Error;
struct TB_ErrorBuilder;

struct TB_ResLogin;
struct TB_ResLoginBuilder;

struct TB_ResRoundTripTime;
struct TB_ResRoundTripTimeBuilder;

struct TB_BcastEnterGameRoom;
struct TB_BcastEnterGameRoomBuilder;

struct TB_BcastExitGameRoom;
struct TB_BcastExitGameRoomBuilder;

struct TB_BcastMove;
struct TB_BcastMoveBuilder;

struct TB_BcastLocationSync;
struct TB_BcastLocationSyncBuilder;

struct TB_BcastAction;
struct TB_BcastActionBuilder;

struct TB_BcastHit;
struct TB_BcastHitBuilder;

struct TB_BcastRotate;
struct TB_BcastRotateBuilder;

enum OpMove {
  OpMove_None = 0,
  OpMove_Start = 1,
  OpMove_Change = 2,
  OpMove_End = 3,
  OpMove_MIN = OpMove_None,
  OpMove_MAX = OpMove_End
};

inline const OpMove (&EnumValuesOpMove())[4] {
  static const OpMove values[] = {
    OpMove_None,
    OpMove_Start,
    OpMove_Change,
    OpMove_End
  };
  return values;
}

inline const char * const *EnumNamesOpMove() {
  static const char * const names[5] = {
    "None",
    "Start",
    "Change",
    "End",
    nullptr
  };
  return names;
}

inline const char *EnumNameOpMove(OpMove e) {
  if (flatbuffers::IsOutRange(e, OpMove_None, OpMove_End)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOpMove()[index];
}

enum OpAction {
  OpAction_None = 0,
  OpAction_Jump = 1,
  OpAction_Vaulting = 2,
  OpAction_DrawWeapon = 3,
  OpAction_MeleeAttack = 4,
  OpAction_MeleeAttackCombo = 5,
  OpAction_MIN = OpAction_None,
  OpAction_MAX = OpAction_MeleeAttackCombo
};

inline const OpAction (&EnumValuesOpAction())[6] {
  static const OpAction values[] = {
    OpAction_None,
    OpAction_Jump,
    OpAction_Vaulting,
    OpAction_DrawWeapon,
    OpAction_MeleeAttack,
    OpAction_MeleeAttackCombo
  };
  return values;
}

inline const char * const *EnumNamesOpAction() {
  static const char * const names[7] = {
    "None",
    "Jump",
    "Vaulting",
    "DrawWeapon",
    "MeleeAttack",
    "MeleeAttackCombo",
    nullptr
  };
  return names;
}

inline const char *EnumNameOpAction(OpAction e) {
  if (flatbuffers::IsOutRange(e, OpAction_None, OpAction_MeleeAttackCombo)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOpAction()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) ST_Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  ST_Vec3() {
    memset(static_cast<void *>(this), 0, sizeof(ST_Vec3));
  }
  ST_Vec3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(ST_Vec3, 12);

struct TB_CompUserTransform FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_CompUserTransformBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LOCATION = 4,
    VT_ROTATION = 6
  };
  const ST_Vec3 *Location() const {
    return GetStruct<const ST_Vec3 *>(VT_LOCATION);
  }
  const ST_Vec3 *Rotation() const {
    return GetStruct<const ST_Vec3 *>(VT_ROTATION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<ST_Vec3>(verifier, VT_LOCATION) &&
           VerifyField<ST_Vec3>(verifier, VT_ROTATION) &&
           verifier.EndTable();
  }
};

struct TB_CompUserTransformBuilder {
  typedef TB_CompUserTransform Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Location(const ST_Vec3 *Location) {
    fbb_.AddStruct(TB_CompUserTransform::VT_LOCATION, Location);
  }
  void add_Rotation(const ST_Vec3 *Rotation) {
    fbb_.AddStruct(TB_CompUserTransform::VT_ROTATION, Rotation);
  }
  explicit TB_CompUserTransformBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_CompUserTransformBuilder &operator=(const TB_CompUserTransformBuilder &);
  flatbuffers::Offset<TB_CompUserTransform> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_CompUserTransform>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_CompUserTransform> CreateTB_CompUserTransform(
    flatbuffers::FlatBufferBuilder &_fbb,
    const ST_Vec3 *Location = 0,
    const ST_Vec3 *Rotation = 0) {
  TB_CompUserTransformBuilder builder_(_fbb);
  builder_.add_Rotation(Rotation);
  builder_.add_Location(Location);
  return builder_.Finish();
}

struct TB_CompUserCondition FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_CompUserConditionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ISCOMBATPOSTURE = 4
  };
  bool IsCombatPosture() const {
    return GetField<uint8_t>(VT_ISCOMBATPOSTURE, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ISCOMBATPOSTURE) &&
           verifier.EndTable();
  }
};

struct TB_CompUserConditionBuilder {
  typedef TB_CompUserCondition Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_IsCombatPosture(bool IsCombatPosture) {
    fbb_.AddElement<uint8_t>(TB_CompUserCondition::VT_ISCOMBATPOSTURE, static_cast<uint8_t>(IsCombatPosture), 0);
  }
  explicit TB_CompUserConditionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_CompUserConditionBuilder &operator=(const TB_CompUserConditionBuilder &);
  flatbuffers::Offset<TB_CompUserCondition> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_CompUserCondition>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_CompUserCondition> CreateTB_CompUserCondition(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool IsCombatPosture = false) {
  TB_CompUserConditionBuilder builder_(_fbb);
  builder_.add_IsCombatPosture(IsCombatPosture);
  return builder_.Finish();
}

struct TB_ObjUser FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_ObjUserBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERID = 4,
    VT_TRANSFORM = 6,
    VT_CONDITION = 8
  };
  const flatbuffers::String *UserId() const {
    return GetPointer<const flatbuffers::String *>(VT_USERID);
  }
  const TB_CompUserTransform *Transform() const {
    return GetPointer<const TB_CompUserTransform *>(VT_TRANSFORM);
  }
  const TB_CompUserCondition *Condition() const {
    return GetPointer<const TB_CompUserCondition *>(VT_CONDITION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERID) &&
           verifier.VerifyString(UserId()) &&
           VerifyOffset(verifier, VT_TRANSFORM) &&
           verifier.VerifyTable(Transform()) &&
           VerifyOffset(verifier, VT_CONDITION) &&
           verifier.VerifyTable(Condition()) &&
           verifier.EndTable();
  }
};

struct TB_ObjUserBuilder {
  typedef TB_ObjUser Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_UserId(flatbuffers::Offset<flatbuffers::String> UserId) {
    fbb_.AddOffset(TB_ObjUser::VT_USERID, UserId);
  }
  void add_Transform(flatbuffers::Offset<TB_CompUserTransform> Transform) {
    fbb_.AddOffset(TB_ObjUser::VT_TRANSFORM, Transform);
  }
  void add_Condition(flatbuffers::Offset<TB_CompUserCondition> Condition) {
    fbb_.AddOffset(TB_ObjUser::VT_CONDITION, Condition);
  }
  explicit TB_ObjUserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_ObjUserBuilder &operator=(const TB_ObjUserBuilder &);
  flatbuffers::Offset<TB_ObjUser> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_ObjUser>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_ObjUser> CreateTB_ObjUser(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> UserId = 0,
    flatbuffers::Offset<TB_CompUserTransform> Transform = 0,
    flatbuffers::Offset<TB_CompUserCondition> Condition = 0) {
  TB_ObjUserBuilder builder_(_fbb);
  builder_.add_Condition(Condition);
  builder_.add_Transform(Transform);
  builder_.add_UserId(UserId);
  return builder_.Finish();
}

inline flatbuffers::Offset<TB_ObjUser> CreateTB_ObjUserDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *UserId = nullptr,
    flatbuffers::Offset<TB_CompUserTransform> Transform = 0,
    flatbuffers::Offset<TB_CompUserCondition> Condition = 0) {
  auto UserId__ = UserId ? _fbb.CreateString(UserId) : 0;
  return CreateTB_ObjUser(
      _fbb,
      UserId__,
      Transform,
      Condition);
}

struct TB_InputMove FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_InputMoveBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FORWARDVECTOR = 4,
    VT_RIGHTVECTOR = 6,
    VT_MOVEFORWARD = 8,
    VT_MOVERIGHT = 10
  };
  const ST_Vec3 *ForwardVector() const {
    return GetStruct<const ST_Vec3 *>(VT_FORWARDVECTOR);
  }
  const ST_Vec3 *RightVector() const {
    return GetStruct<const ST_Vec3 *>(VT_RIGHTVECTOR);
  }
  float MoveForward() const {
    return GetField<float>(VT_MOVEFORWARD, 0.0f);
  }
  float MoveRight() const {
    return GetField<float>(VT_MOVERIGHT, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<ST_Vec3>(verifier, VT_FORWARDVECTOR) &&
           VerifyField<ST_Vec3>(verifier, VT_RIGHTVECTOR) &&
           VerifyField<float>(verifier, VT_MOVEFORWARD) &&
           VerifyField<float>(verifier, VT_MOVERIGHT) &&
           verifier.EndTable();
  }
};

struct TB_InputMoveBuilder {
  typedef TB_InputMove Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ForwardVector(const ST_Vec3 *ForwardVector) {
    fbb_.AddStruct(TB_InputMove::VT_FORWARDVECTOR, ForwardVector);
  }
  void add_RightVector(const ST_Vec3 *RightVector) {
    fbb_.AddStruct(TB_InputMove::VT_RIGHTVECTOR, RightVector);
  }
  void add_MoveForward(float MoveForward) {
    fbb_.AddElement<float>(TB_InputMove::VT_MOVEFORWARD, MoveForward, 0.0f);
  }
  void add_MoveRight(float MoveRight) {
    fbb_.AddElement<float>(TB_InputMove::VT_MOVERIGHT, MoveRight, 0.0f);
  }
  explicit TB_InputMoveBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_InputMoveBuilder &operator=(const TB_InputMoveBuilder &);
  flatbuffers::Offset<TB_InputMove> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_InputMove>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_InputMove> CreateTB_InputMove(
    flatbuffers::FlatBufferBuilder &_fbb,
    const ST_Vec3 *ForwardVector = 0,
    const ST_Vec3 *RightVector = 0,
    float MoveForward = 0.0f,
    float MoveRight = 0.0f) {
  TB_InputMoveBuilder builder_(_fbb);
  builder_.add_MoveRight(MoveRight);
  builder_.add_MoveForward(MoveForward);
  builder_.add_RightVector(RightVector);
  builder_.add_ForwardVector(ForwardVector);
  return builder_.Finish();
}

struct TB_InputAction FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_InputActionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LOCATION = 4,
    VT_ROTATION = 6,
    VT_COMBOSECTIONNAME = 8,
    VT_ISCOMBATPOSTURE = 10
  };
  const ST_Vec3 *Location() const {
    return GetStruct<const ST_Vec3 *>(VT_LOCATION);
  }
  const ST_Vec3 *Rotation() const {
    return GetStruct<const ST_Vec3 *>(VT_ROTATION);
  }
  const flatbuffers::String *ComboSectionName() const {
    return GetPointer<const flatbuffers::String *>(VT_COMBOSECTIONNAME);
  }
  bool IsCombatPosture() const {
    return GetField<uint8_t>(VT_ISCOMBATPOSTURE, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<ST_Vec3>(verifier, VT_LOCATION) &&
           VerifyField<ST_Vec3>(verifier, VT_ROTATION) &&
           VerifyOffset(verifier, VT_COMBOSECTIONNAME) &&
           verifier.VerifyString(ComboSectionName()) &&
           VerifyField<uint8_t>(verifier, VT_ISCOMBATPOSTURE) &&
           verifier.EndTable();
  }
};

struct TB_InputActionBuilder {
  typedef TB_InputAction Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Location(const ST_Vec3 *Location) {
    fbb_.AddStruct(TB_InputAction::VT_LOCATION, Location);
  }
  void add_Rotation(const ST_Vec3 *Rotation) {
    fbb_.AddStruct(TB_InputAction::VT_ROTATION, Rotation);
  }
  void add_ComboSectionName(flatbuffers::Offset<flatbuffers::String> ComboSectionName) {
    fbb_.AddOffset(TB_InputAction::VT_COMBOSECTIONNAME, ComboSectionName);
  }
  void add_IsCombatPosture(bool IsCombatPosture) {
    fbb_.AddElement<uint8_t>(TB_InputAction::VT_ISCOMBATPOSTURE, static_cast<uint8_t>(IsCombatPosture), 0);
  }
  explicit TB_InputActionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_InputActionBuilder &operator=(const TB_InputActionBuilder &);
  flatbuffers::Offset<TB_InputAction> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_InputAction>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_InputAction> CreateTB_InputAction(
    flatbuffers::FlatBufferBuilder &_fbb,
    const ST_Vec3 *Location = 0,
    const ST_Vec3 *Rotation = 0,
    flatbuffers::Offset<flatbuffers::String> ComboSectionName = 0,
    bool IsCombatPosture = false) {
  TB_InputActionBuilder builder_(_fbb);
  builder_.add_ComboSectionName(ComboSectionName);
  builder_.add_Rotation(Rotation);
  builder_.add_Location(Location);
  builder_.add_IsCombatPosture(IsCombatPosture);
  return builder_.Finish();
}

inline flatbuffers::Offset<TB_InputAction> CreateTB_InputActionDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const ST_Vec3 *Location = 0,
    const ST_Vec3 *Rotation = 0,
    const char *ComboSectionName = nullptr,
    bool IsCombatPosture = false) {
  auto ComboSectionName__ = ComboSectionName ? _fbb.CreateString(ComboSectionName) : 0;
  return CreateTB_InputAction(
      _fbb,
      Location,
      Rotation,
      ComboSectionName__,
      IsCombatPosture);
}

struct TB_ReqLogin FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_ReqLoginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERID = 4,
    VT_PASSWORD = 6
  };
  const flatbuffers::String *UserId() const {
    return GetPointer<const flatbuffers::String *>(VT_USERID);
  }
  const flatbuffers::String *Password() const {
    return GetPointer<const flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERID) &&
           verifier.VerifyString(UserId()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(Password()) &&
           verifier.EndTable();
  }
};

struct TB_ReqLoginBuilder {
  typedef TB_ReqLogin Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_UserId(flatbuffers::Offset<flatbuffers::String> UserId) {
    fbb_.AddOffset(TB_ReqLogin::VT_USERID, UserId);
  }
  void add_Password(flatbuffers::Offset<flatbuffers::String> Password) {
    fbb_.AddOffset(TB_ReqLogin::VT_PASSWORD, Password);
  }
  explicit TB_ReqLoginBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_ReqLoginBuilder &operator=(const TB_ReqLoginBuilder &);
  flatbuffers::Offset<TB_ReqLogin> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_ReqLogin>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_ReqLogin> CreateTB_ReqLogin(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> UserId = 0,
    flatbuffers::Offset<flatbuffers::String> Password = 0) {
  TB_ReqLoginBuilder builder_(_fbb);
  builder_.add_Password(Password);
  builder_.add_UserId(UserId);
  return builder_.Finish();
}

inline flatbuffers::Offset<TB_ReqLogin> CreateTB_ReqLoginDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *UserId = nullptr,
    const char *Password = nullptr) {
  auto UserId__ = UserId ? _fbb.CreateString(UserId) : 0;
  auto Password__ = Password ? _fbb.CreateString(Password) : 0;
  return CreateTB_ReqLogin(
      _fbb,
      UserId__,
      Password__);
}

struct TB_ReqMove FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_ReqMoveBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OPERATION = 4,
    VT_INPUTMOVE = 6
  };
  OpMove Operation() const {
    return static_cast<OpMove>(GetField<int8_t>(VT_OPERATION, 0));
  }
  const TB_InputMove *InputMove() const {
    return GetPointer<const TB_InputMove *>(VT_INPUTMOVE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_OPERATION) &&
           VerifyOffset(verifier, VT_INPUTMOVE) &&
           verifier.VerifyTable(InputMove()) &&
           verifier.EndTable();
  }
};

struct TB_ReqMoveBuilder {
  typedef TB_ReqMove Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Operation(OpMove Operation) {
    fbb_.AddElement<int8_t>(TB_ReqMove::VT_OPERATION, static_cast<int8_t>(Operation), 0);
  }
  void add_InputMove(flatbuffers::Offset<TB_InputMove> InputMove) {
    fbb_.AddOffset(TB_ReqMove::VT_INPUTMOVE, InputMove);
  }
  explicit TB_ReqMoveBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_ReqMoveBuilder &operator=(const TB_ReqMoveBuilder &);
  flatbuffers::Offset<TB_ReqMove> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_ReqMove>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_ReqMove> CreateTB_ReqMove(
    flatbuffers::FlatBufferBuilder &_fbb,
    OpMove Operation = OpMove_None,
    flatbuffers::Offset<TB_InputMove> InputMove = 0) {
  TB_ReqMoveBuilder builder_(_fbb);
  builder_.add_InputMove(InputMove);
  builder_.add_Operation(Operation);
  return builder_.Finish();
}

struct TB_ReqLocationSync FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_ReqLocationSyncBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LOCATION = 4
  };
  const ST_Vec3 *Location() const {
    return GetStruct<const ST_Vec3 *>(VT_LOCATION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<ST_Vec3>(verifier, VT_LOCATION) &&
           verifier.EndTable();
  }
};

struct TB_ReqLocationSyncBuilder {
  typedef TB_ReqLocationSync Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Location(const ST_Vec3 *Location) {
    fbb_.AddStruct(TB_ReqLocationSync::VT_LOCATION, Location);
  }
  explicit TB_ReqLocationSyncBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_ReqLocationSyncBuilder &operator=(const TB_ReqLocationSyncBuilder &);
  flatbuffers::Offset<TB_ReqLocationSync> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_ReqLocationSync>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_ReqLocationSync> CreateTB_ReqLocationSync(
    flatbuffers::FlatBufferBuilder &_fbb,
    const ST_Vec3 *Location = 0) {
  TB_ReqLocationSyncBuilder builder_(_fbb);
  builder_.add_Location(Location);
  return builder_.Finish();
}

struct TB_ReqRoundTripTime FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_ReqRoundTripTimeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CURRENTTIMEMS = 4
  };
  int64_t CurrentTimeMs() const {
    return GetField<int64_t>(VT_CURRENTTIMEMS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_CURRENTTIMEMS) &&
           verifier.EndTable();
  }
};

struct TB_ReqRoundTripTimeBuilder {
  typedef TB_ReqRoundTripTime Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_CurrentTimeMs(int64_t CurrentTimeMs) {
    fbb_.AddElement<int64_t>(TB_ReqRoundTripTime::VT_CURRENTTIMEMS, CurrentTimeMs, 0);
  }
  explicit TB_ReqRoundTripTimeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_ReqRoundTripTimeBuilder &operator=(const TB_ReqRoundTripTimeBuilder &);
  flatbuffers::Offset<TB_ReqRoundTripTime> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_ReqRoundTripTime>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_ReqRoundTripTime> CreateTB_ReqRoundTripTime(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t CurrentTimeMs = 0) {
  TB_ReqRoundTripTimeBuilder builder_(_fbb);
  builder_.add_CurrentTimeMs(CurrentTimeMs);
  return builder_.Finish();
}

struct TB_ReqAction FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_ReqActionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OPERATION = 4,
    VT_INPUTACTION = 6
  };
  OpAction Operation() const {
    return static_cast<OpAction>(GetField<int8_t>(VT_OPERATION, 0));
  }
  const TB_InputAction *InputAction() const {
    return GetPointer<const TB_InputAction *>(VT_INPUTACTION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_OPERATION) &&
           VerifyOffset(verifier, VT_INPUTACTION) &&
           verifier.VerifyTable(InputAction()) &&
           verifier.EndTable();
  }
};

struct TB_ReqActionBuilder {
  typedef TB_ReqAction Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Operation(OpAction Operation) {
    fbb_.AddElement<int8_t>(TB_ReqAction::VT_OPERATION, static_cast<int8_t>(Operation), 0);
  }
  void add_InputAction(flatbuffers::Offset<TB_InputAction> InputAction) {
    fbb_.AddOffset(TB_ReqAction::VT_INPUTACTION, InputAction);
  }
  explicit TB_ReqActionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_ReqActionBuilder &operator=(const TB_ReqActionBuilder &);
  flatbuffers::Offset<TB_ReqAction> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_ReqAction>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_ReqAction> CreateTB_ReqAction(
    flatbuffers::FlatBufferBuilder &_fbb,
    OpAction Operation = OpAction_None,
    flatbuffers::Offset<TB_InputAction> InputAction = 0) {
  TB_ReqActionBuilder builder_(_fbb);
  builder_.add_InputAction(InputAction);
  builder_.add_Operation(Operation);
  return builder_.Finish();
}

struct TB_ReqDamage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_ReqDamageBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct TB_ReqDamageBuilder {
  typedef TB_ReqDamage Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit TB_ReqDamageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_ReqDamageBuilder &operator=(const TB_ReqDamageBuilder &);
  flatbuffers::Offset<TB_ReqDamage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_ReqDamage>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_ReqDamage> CreateTB_ReqDamage(
    flatbuffers::FlatBufferBuilder &_fbb) {
  TB_ReqDamageBuilder builder_(_fbb);
  return builder_.Finish();
}

struct TB_ReqRotate FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_ReqRotateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROTATION = 4
  };
  const ST_Vec3 *Rotation() const {
    return GetStruct<const ST_Vec3 *>(VT_ROTATION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<ST_Vec3>(verifier, VT_ROTATION) &&
           verifier.EndTable();
  }
};

struct TB_ReqRotateBuilder {
  typedef TB_ReqRotate Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Rotation(const ST_Vec3 *Rotation) {
    fbb_.AddStruct(TB_ReqRotate::VT_ROTATION, Rotation);
  }
  explicit TB_ReqRotateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_ReqRotateBuilder &operator=(const TB_ReqRotateBuilder &);
  flatbuffers::Offset<TB_ReqRotate> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_ReqRotate>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_ReqRotate> CreateTB_ReqRotate(
    flatbuffers::FlatBufferBuilder &_fbb,
    const ST_Vec3 *Rotation = 0) {
  TB_ReqRotateBuilder builder_(_fbb);
  builder_.add_Rotation(Rotation);
  return builder_.Finish();
}

struct TB_Error FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_ErrorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE = 4
  };
  const flatbuffers::String *Message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(Message()) &&
           verifier.EndTable();
  }
};

struct TB_ErrorBuilder {
  typedef TB_Error Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Message(flatbuffers::Offset<flatbuffers::String> Message) {
    fbb_.AddOffset(TB_Error::VT_MESSAGE, Message);
  }
  explicit TB_ErrorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_ErrorBuilder &operator=(const TB_ErrorBuilder &);
  flatbuffers::Offset<TB_Error> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_Error>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_Error> CreateTB_Error(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> Message = 0) {
  TB_ErrorBuilder builder_(_fbb);
  builder_.add_Message(Message);
  return builder_.Finish();
}

inline flatbuffers::Offset<TB_Error> CreateTB_ErrorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *Message = nullptr) {
  auto Message__ = Message ? _fbb.CreateString(Message) : 0;
  return CreateTB_Error(
      _fbb,
      Message__);
}

struct TB_ResLogin FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_ResLoginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJUSERLIST = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<TB_ObjUser>> *ObjUserList() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<TB_ObjUser>> *>(VT_OBJUSERLIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJUSERLIST) &&
           verifier.VerifyVector(ObjUserList()) &&
           verifier.VerifyVectorOfTables(ObjUserList()) &&
           verifier.EndTable();
  }
};

struct TB_ResLoginBuilder {
  typedef TB_ResLogin Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ObjUserList(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TB_ObjUser>>> ObjUserList) {
    fbb_.AddOffset(TB_ResLogin::VT_OBJUSERLIST, ObjUserList);
  }
  explicit TB_ResLoginBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_ResLoginBuilder &operator=(const TB_ResLoginBuilder &);
  flatbuffers::Offset<TB_ResLogin> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_ResLogin>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_ResLogin> CreateTB_ResLogin(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TB_ObjUser>>> ObjUserList = 0) {
  TB_ResLoginBuilder builder_(_fbb);
  builder_.add_ObjUserList(ObjUserList);
  return builder_.Finish();
}

inline flatbuffers::Offset<TB_ResLogin> CreateTB_ResLoginDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<TB_ObjUser>> *ObjUserList = nullptr) {
  auto ObjUserList__ = ObjUserList ? _fbb.CreateVector<flatbuffers::Offset<TB_ObjUser>>(*ObjUserList) : 0;
  return CreateTB_ResLogin(
      _fbb,
      ObjUserList__);
}

struct TB_ResRoundTripTime FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_ResRoundTripTimeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CURRENTTIMEMS = 4,
    VT_ROUNDTRIPTIMEMS = 6
  };
  int64_t CurrentTimeMs() const {
    return GetField<int64_t>(VT_CURRENTTIMEMS, 0);
  }
  int64_t RoundTripTimeMs() const {
    return GetField<int64_t>(VT_ROUNDTRIPTIMEMS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_CURRENTTIMEMS) &&
           VerifyField<int64_t>(verifier, VT_ROUNDTRIPTIMEMS) &&
           verifier.EndTable();
  }
};

struct TB_ResRoundTripTimeBuilder {
  typedef TB_ResRoundTripTime Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_CurrentTimeMs(int64_t CurrentTimeMs) {
    fbb_.AddElement<int64_t>(TB_ResRoundTripTime::VT_CURRENTTIMEMS, CurrentTimeMs, 0);
  }
  void add_RoundTripTimeMs(int64_t RoundTripTimeMs) {
    fbb_.AddElement<int64_t>(TB_ResRoundTripTime::VT_ROUNDTRIPTIMEMS, RoundTripTimeMs, 0);
  }
  explicit TB_ResRoundTripTimeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_ResRoundTripTimeBuilder &operator=(const TB_ResRoundTripTimeBuilder &);
  flatbuffers::Offset<TB_ResRoundTripTime> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_ResRoundTripTime>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_ResRoundTripTime> CreateTB_ResRoundTripTime(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t CurrentTimeMs = 0,
    int64_t RoundTripTimeMs = 0) {
  TB_ResRoundTripTimeBuilder builder_(_fbb);
  builder_.add_RoundTripTimeMs(RoundTripTimeMs);
  builder_.add_CurrentTimeMs(CurrentTimeMs);
  return builder_.Finish();
}

struct TB_BcastEnterGameRoom FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_BcastEnterGameRoomBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJUSER = 4
  };
  const TB_ObjUser *ObjUser() const {
    return GetPointer<const TB_ObjUser *>(VT_OBJUSER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJUSER) &&
           verifier.VerifyTable(ObjUser()) &&
           verifier.EndTable();
  }
};

struct TB_BcastEnterGameRoomBuilder {
  typedef TB_BcastEnterGameRoom Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ObjUser(flatbuffers::Offset<TB_ObjUser> ObjUser) {
    fbb_.AddOffset(TB_BcastEnterGameRoom::VT_OBJUSER, ObjUser);
  }
  explicit TB_BcastEnterGameRoomBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_BcastEnterGameRoomBuilder &operator=(const TB_BcastEnterGameRoomBuilder &);
  flatbuffers::Offset<TB_BcastEnterGameRoom> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_BcastEnterGameRoom>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_BcastEnterGameRoom> CreateTB_BcastEnterGameRoom(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<TB_ObjUser> ObjUser = 0) {
  TB_BcastEnterGameRoomBuilder builder_(_fbb);
  builder_.add_ObjUser(ObjUser);
  return builder_.Finish();
}

struct TB_BcastExitGameRoom FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_BcastExitGameRoomBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJUSER = 4
  };
  const TB_ObjUser *ObjUser() const {
    return GetPointer<const TB_ObjUser *>(VT_OBJUSER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJUSER) &&
           verifier.VerifyTable(ObjUser()) &&
           verifier.EndTable();
  }
};

struct TB_BcastExitGameRoomBuilder {
  typedef TB_BcastExitGameRoom Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ObjUser(flatbuffers::Offset<TB_ObjUser> ObjUser) {
    fbb_.AddOffset(TB_BcastExitGameRoom::VT_OBJUSER, ObjUser);
  }
  explicit TB_BcastExitGameRoomBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_BcastExitGameRoomBuilder &operator=(const TB_BcastExitGameRoomBuilder &);
  flatbuffers::Offset<TB_BcastExitGameRoom> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_BcastExitGameRoom>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_BcastExitGameRoom> CreateTB_BcastExitGameRoom(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<TB_ObjUser> ObjUser = 0) {
  TB_BcastExitGameRoomBuilder builder_(_fbb);
  builder_.add_ObjUser(ObjUser);
  return builder_.Finish();
}

struct TB_BcastMove FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_BcastMoveBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERID = 4,
    VT_OPERATION = 6,
    VT_INPUTMOVE = 8
  };
  const flatbuffers::String *UserId() const {
    return GetPointer<const flatbuffers::String *>(VT_USERID);
  }
  OpMove Operation() const {
    return static_cast<OpMove>(GetField<int8_t>(VT_OPERATION, 0));
  }
  const TB_InputMove *InputMove() const {
    return GetPointer<const TB_InputMove *>(VT_INPUTMOVE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERID) &&
           verifier.VerifyString(UserId()) &&
           VerifyField<int8_t>(verifier, VT_OPERATION) &&
           VerifyOffset(verifier, VT_INPUTMOVE) &&
           verifier.VerifyTable(InputMove()) &&
           verifier.EndTable();
  }
};

struct TB_BcastMoveBuilder {
  typedef TB_BcastMove Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_UserId(flatbuffers::Offset<flatbuffers::String> UserId) {
    fbb_.AddOffset(TB_BcastMove::VT_USERID, UserId);
  }
  void add_Operation(OpMove Operation) {
    fbb_.AddElement<int8_t>(TB_BcastMove::VT_OPERATION, static_cast<int8_t>(Operation), 0);
  }
  void add_InputMove(flatbuffers::Offset<TB_InputMove> InputMove) {
    fbb_.AddOffset(TB_BcastMove::VT_INPUTMOVE, InputMove);
  }
  explicit TB_BcastMoveBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_BcastMoveBuilder &operator=(const TB_BcastMoveBuilder &);
  flatbuffers::Offset<TB_BcastMove> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_BcastMove>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_BcastMove> CreateTB_BcastMove(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> UserId = 0,
    OpMove Operation = OpMove_None,
    flatbuffers::Offset<TB_InputMove> InputMove = 0) {
  TB_BcastMoveBuilder builder_(_fbb);
  builder_.add_InputMove(InputMove);
  builder_.add_UserId(UserId);
  builder_.add_Operation(Operation);
  return builder_.Finish();
}

inline flatbuffers::Offset<TB_BcastMove> CreateTB_BcastMoveDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *UserId = nullptr,
    OpMove Operation = OpMove_None,
    flatbuffers::Offset<TB_InputMove> InputMove = 0) {
  auto UserId__ = UserId ? _fbb.CreateString(UserId) : 0;
  return CreateTB_BcastMove(
      _fbb,
      UserId__,
      Operation,
      InputMove);
}

struct TB_BcastLocationSync FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_BcastLocationSyncBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERID = 4,
    VT_LOCATION = 6
  };
  const flatbuffers::String *UserId() const {
    return GetPointer<const flatbuffers::String *>(VT_USERID);
  }
  const ST_Vec3 *Location() const {
    return GetStruct<const ST_Vec3 *>(VT_LOCATION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERID) &&
           verifier.VerifyString(UserId()) &&
           VerifyField<ST_Vec3>(verifier, VT_LOCATION) &&
           verifier.EndTable();
  }
};

struct TB_BcastLocationSyncBuilder {
  typedef TB_BcastLocationSync Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_UserId(flatbuffers::Offset<flatbuffers::String> UserId) {
    fbb_.AddOffset(TB_BcastLocationSync::VT_USERID, UserId);
  }
  void add_Location(const ST_Vec3 *Location) {
    fbb_.AddStruct(TB_BcastLocationSync::VT_LOCATION, Location);
  }
  explicit TB_BcastLocationSyncBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_BcastLocationSyncBuilder &operator=(const TB_BcastLocationSyncBuilder &);
  flatbuffers::Offset<TB_BcastLocationSync> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_BcastLocationSync>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_BcastLocationSync> CreateTB_BcastLocationSync(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> UserId = 0,
    const ST_Vec3 *Location = 0) {
  TB_BcastLocationSyncBuilder builder_(_fbb);
  builder_.add_Location(Location);
  builder_.add_UserId(UserId);
  return builder_.Finish();
}

inline flatbuffers::Offset<TB_BcastLocationSync> CreateTB_BcastLocationSyncDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *UserId = nullptr,
    const ST_Vec3 *Location = 0) {
  auto UserId__ = UserId ? _fbb.CreateString(UserId) : 0;
  return CreateTB_BcastLocationSync(
      _fbb,
      UserId__,
      Location);
}

struct TB_BcastAction FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_BcastActionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERID = 4,
    VT_OPERATION = 6,
    VT_INPUTACTION = 8
  };
  const flatbuffers::String *UserId() const {
    return GetPointer<const flatbuffers::String *>(VT_USERID);
  }
  OpAction Operation() const {
    return static_cast<OpAction>(GetField<int8_t>(VT_OPERATION, 0));
  }
  const TB_InputAction *InputAction() const {
    return GetPointer<const TB_InputAction *>(VT_INPUTACTION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERID) &&
           verifier.VerifyString(UserId()) &&
           VerifyField<int8_t>(verifier, VT_OPERATION) &&
           VerifyOffset(verifier, VT_INPUTACTION) &&
           verifier.VerifyTable(InputAction()) &&
           verifier.EndTable();
  }
};

struct TB_BcastActionBuilder {
  typedef TB_BcastAction Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_UserId(flatbuffers::Offset<flatbuffers::String> UserId) {
    fbb_.AddOffset(TB_BcastAction::VT_USERID, UserId);
  }
  void add_Operation(OpAction Operation) {
    fbb_.AddElement<int8_t>(TB_BcastAction::VT_OPERATION, static_cast<int8_t>(Operation), 0);
  }
  void add_InputAction(flatbuffers::Offset<TB_InputAction> InputAction) {
    fbb_.AddOffset(TB_BcastAction::VT_INPUTACTION, InputAction);
  }
  explicit TB_BcastActionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_BcastActionBuilder &operator=(const TB_BcastActionBuilder &);
  flatbuffers::Offset<TB_BcastAction> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_BcastAction>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_BcastAction> CreateTB_BcastAction(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> UserId = 0,
    OpAction Operation = OpAction_None,
    flatbuffers::Offset<TB_InputAction> InputAction = 0) {
  TB_BcastActionBuilder builder_(_fbb);
  builder_.add_InputAction(InputAction);
  builder_.add_UserId(UserId);
  builder_.add_Operation(Operation);
  return builder_.Finish();
}

inline flatbuffers::Offset<TB_BcastAction> CreateTB_BcastActionDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *UserId = nullptr,
    OpAction Operation = OpAction_None,
    flatbuffers::Offset<TB_InputAction> InputAction = 0) {
  auto UserId__ = UserId ? _fbb.CreateString(UserId) : 0;
  return CreateTB_BcastAction(
      _fbb,
      UserId__,
      Operation,
      InputAction);
}

struct TB_BcastHit FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_BcastHitBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERID = 4
  };
  const flatbuffers::String *UserId() const {
    return GetPointer<const flatbuffers::String *>(VT_USERID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERID) &&
           verifier.VerifyString(UserId()) &&
           verifier.EndTable();
  }
};

struct TB_BcastHitBuilder {
  typedef TB_BcastHit Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_UserId(flatbuffers::Offset<flatbuffers::String> UserId) {
    fbb_.AddOffset(TB_BcastHit::VT_USERID, UserId);
  }
  explicit TB_BcastHitBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_BcastHitBuilder &operator=(const TB_BcastHitBuilder &);
  flatbuffers::Offset<TB_BcastHit> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_BcastHit>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_BcastHit> CreateTB_BcastHit(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> UserId = 0) {
  TB_BcastHitBuilder builder_(_fbb);
  builder_.add_UserId(UserId);
  return builder_.Finish();
}

inline flatbuffers::Offset<TB_BcastHit> CreateTB_BcastHitDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *UserId = nullptr) {
  auto UserId__ = UserId ? _fbb.CreateString(UserId) : 0;
  return CreateTB_BcastHit(
      _fbb,
      UserId__);
}

struct TB_BcastRotate FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_BcastRotateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERID = 4,
    VT_ROTATION = 6
  };
  const flatbuffers::String *UserId() const {
    return GetPointer<const flatbuffers::String *>(VT_USERID);
  }
  const ST_Vec3 *Rotation() const {
    return GetStruct<const ST_Vec3 *>(VT_ROTATION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERID) &&
           verifier.VerifyString(UserId()) &&
           VerifyField<ST_Vec3>(verifier, VT_ROTATION) &&
           verifier.EndTable();
  }
};

struct TB_BcastRotateBuilder {
  typedef TB_BcastRotate Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_UserId(flatbuffers::Offset<flatbuffers::String> UserId) {
    fbb_.AddOffset(TB_BcastRotate::VT_USERID, UserId);
  }
  void add_Rotation(const ST_Vec3 *Rotation) {
    fbb_.AddStruct(TB_BcastRotate::VT_ROTATION, Rotation);
  }
  explicit TB_BcastRotateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_BcastRotateBuilder &operator=(const TB_BcastRotateBuilder &);
  flatbuffers::Offset<TB_BcastRotate> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_BcastRotate>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_BcastRotate> CreateTB_BcastRotate(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> UserId = 0,
    const ST_Vec3 *Rotation = 0) {
  TB_BcastRotateBuilder builder_(_fbb);
  builder_.add_Rotation(Rotation);
  builder_.add_UserId(UserId);
  return builder_.Finish();
}

inline flatbuffers::Offset<TB_BcastRotate> CreateTB_BcastRotateDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *UserId = nullptr,
    const ST_Vec3 *Rotation = 0) {
  auto UserId__ = UserId ? _fbb.CreateString(UserId) : 0;
  return CreateTB_BcastRotate(
      _fbb,
      UserId__,
      Rotation);
}

#endif  // FLATBUFFERS_GENERATED_TP_H_
