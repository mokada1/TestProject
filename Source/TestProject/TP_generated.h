// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TP_H_
#define FLATBUFFERS_GENERATED_TP_H_

#include "flatbuffers/flatbuffers.h"

struct ST_Vec3;

struct TB_CompUserLocation;
struct TB_CompUserLocationBuilder;

struct TB_ObjUser;
struct TB_ObjUserBuilder;

struct TB_ReqLogin;
struct TB_ReqLoginBuilder;

struct TB_Error;
struct TB_ErrorBuilder;

struct TB_ResLogin;
struct TB_ResLoginBuilder;

struct TB_BcastEnterGameRoom;
struct TB_BcastEnterGameRoomBuilder;

struct TB_BcastExitGameRoom;
struct TB_BcastExitGameRoomBuilder;

struct TB_InputMove;
struct TB_InputMoveBuilder;

struct TB_ReqMove;
struct TB_ReqMoveBuilder;

struct TB_BcastMove;
struct TB_BcastMoveBuilder;

struct TB_ReqLocationSync;
struct TB_ReqLocationSyncBuilder;

struct TB_BcastLocationSync;
struct TB_BcastLocationSyncBuilder;

enum OpMove {
  OpMove_Start = 0,
  OpMove_Change = 1,
  OpMove_End = 2,
  OpMove_MIN = OpMove_Start,
  OpMove_MAX = OpMove_End
};

inline const OpMove (&EnumValuesOpMove())[3] {
  static const OpMove values[] = {
    OpMove_Start,
    OpMove_Change,
    OpMove_End
  };
  return values;
}

inline const char * const *EnumNamesOpMove() {
  static const char * const names[4] = {
    "Start",
    "Change",
    "End",
    nullptr
  };
  return names;
}

inline const char *EnumNameOpMove(OpMove e) {
  if (flatbuffers::IsOutRange(e, OpMove_Start, OpMove_End)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOpMove()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) ST_Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  ST_Vec3() {
    memset(static_cast<void *>(this), 0, sizeof(ST_Vec3));
  }
  ST_Vec3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(ST_Vec3, 12);

struct TB_CompUserLocation FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_CompUserLocationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LOCATION = 4
  };
  const ST_Vec3 *Location() const {
    return GetStruct<const ST_Vec3 *>(VT_LOCATION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<ST_Vec3>(verifier, VT_LOCATION) &&
           verifier.EndTable();
  }
};

struct TB_CompUserLocationBuilder {
  typedef TB_CompUserLocation Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Location(const ST_Vec3 *Location) {
    fbb_.AddStruct(TB_CompUserLocation::VT_LOCATION, Location);
  }
  explicit TB_CompUserLocationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_CompUserLocationBuilder &operator=(const TB_CompUserLocationBuilder &);
  flatbuffers::Offset<TB_CompUserLocation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_CompUserLocation>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_CompUserLocation> CreateTB_CompUserLocation(
    flatbuffers::FlatBufferBuilder &_fbb,
    const ST_Vec3 *Location = 0) {
  TB_CompUserLocationBuilder builder_(_fbb);
  builder_.add_Location(Location);
  return builder_.Finish();
}

struct TB_ObjUser FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_ObjUserBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERID = 4,
    VT_PASSWORD = 6,
    VT_USERLOCATION = 8
  };
  const flatbuffers::String *UserId() const {
    return GetPointer<const flatbuffers::String *>(VT_USERID);
  }
  const flatbuffers::String *Password() const {
    return GetPointer<const flatbuffers::String *>(VT_PASSWORD);
  }
  const TB_CompUserLocation *UserLocation() const {
    return GetPointer<const TB_CompUserLocation *>(VT_USERLOCATION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERID) &&
           verifier.VerifyString(UserId()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(Password()) &&
           VerifyOffset(verifier, VT_USERLOCATION) &&
           verifier.VerifyTable(UserLocation()) &&
           verifier.EndTable();
  }
};

struct TB_ObjUserBuilder {
  typedef TB_ObjUser Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_UserId(flatbuffers::Offset<flatbuffers::String> UserId) {
    fbb_.AddOffset(TB_ObjUser::VT_USERID, UserId);
  }
  void add_Password(flatbuffers::Offset<flatbuffers::String> Password) {
    fbb_.AddOffset(TB_ObjUser::VT_PASSWORD, Password);
  }
  void add_UserLocation(flatbuffers::Offset<TB_CompUserLocation> UserLocation) {
    fbb_.AddOffset(TB_ObjUser::VT_USERLOCATION, UserLocation);
  }
  explicit TB_ObjUserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_ObjUserBuilder &operator=(const TB_ObjUserBuilder &);
  flatbuffers::Offset<TB_ObjUser> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_ObjUser>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_ObjUser> CreateTB_ObjUser(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> UserId = 0,
    flatbuffers::Offset<flatbuffers::String> Password = 0,
    flatbuffers::Offset<TB_CompUserLocation> UserLocation = 0) {
  TB_ObjUserBuilder builder_(_fbb);
  builder_.add_UserLocation(UserLocation);
  builder_.add_Password(Password);
  builder_.add_UserId(UserId);
  return builder_.Finish();
}

inline flatbuffers::Offset<TB_ObjUser> CreateTB_ObjUserDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *UserId = nullptr,
    const char *Password = nullptr,
    flatbuffers::Offset<TB_CompUserLocation> UserLocation = 0) {
  auto UserId__ = UserId ? _fbb.CreateString(UserId) : 0;
  auto Password__ = Password ? _fbb.CreateString(Password) : 0;
  return CreateTB_ObjUser(
      _fbb,
      UserId__,
      Password__,
      UserLocation);
}

struct TB_ReqLogin FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_ReqLoginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERID = 4,
    VT_PASSWORD = 6
  };
  const flatbuffers::String *UserId() const {
    return GetPointer<const flatbuffers::String *>(VT_USERID);
  }
  const flatbuffers::String *Password() const {
    return GetPointer<const flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERID) &&
           verifier.VerifyString(UserId()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(Password()) &&
           verifier.EndTable();
  }
};

struct TB_ReqLoginBuilder {
  typedef TB_ReqLogin Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_UserId(flatbuffers::Offset<flatbuffers::String> UserId) {
    fbb_.AddOffset(TB_ReqLogin::VT_USERID, UserId);
  }
  void add_Password(flatbuffers::Offset<flatbuffers::String> Password) {
    fbb_.AddOffset(TB_ReqLogin::VT_PASSWORD, Password);
  }
  explicit TB_ReqLoginBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_ReqLoginBuilder &operator=(const TB_ReqLoginBuilder &);
  flatbuffers::Offset<TB_ReqLogin> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_ReqLogin>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_ReqLogin> CreateTB_ReqLogin(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> UserId = 0,
    flatbuffers::Offset<flatbuffers::String> Password = 0) {
  TB_ReqLoginBuilder builder_(_fbb);
  builder_.add_Password(Password);
  builder_.add_UserId(UserId);
  return builder_.Finish();
}

inline flatbuffers::Offset<TB_ReqLogin> CreateTB_ReqLoginDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *UserId = nullptr,
    const char *Password = nullptr) {
  auto UserId__ = UserId ? _fbb.CreateString(UserId) : 0;
  auto Password__ = Password ? _fbb.CreateString(Password) : 0;
  return CreateTB_ReqLogin(
      _fbb,
      UserId__,
      Password__);
}

struct TB_Error FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_ErrorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE = 4
  };
  const flatbuffers::String *Message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(Message()) &&
           verifier.EndTable();
  }
};

struct TB_ErrorBuilder {
  typedef TB_Error Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Message(flatbuffers::Offset<flatbuffers::String> Message) {
    fbb_.AddOffset(TB_Error::VT_MESSAGE, Message);
  }
  explicit TB_ErrorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_ErrorBuilder &operator=(const TB_ErrorBuilder &);
  flatbuffers::Offset<TB_Error> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_Error>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_Error> CreateTB_Error(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> Message = 0) {
  TB_ErrorBuilder builder_(_fbb);
  builder_.add_Message(Message);
  return builder_.Finish();
}

inline flatbuffers::Offset<TB_Error> CreateTB_ErrorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *Message = nullptr) {
  auto Message__ = Message ? _fbb.CreateString(Message) : 0;
  return CreateTB_Error(
      _fbb,
      Message__);
}

struct TB_ResLogin FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_ResLoginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJUSERLIST = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<TB_ObjUser>> *ObjUserList() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<TB_ObjUser>> *>(VT_OBJUSERLIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJUSERLIST) &&
           verifier.VerifyVector(ObjUserList()) &&
           verifier.VerifyVectorOfTables(ObjUserList()) &&
           verifier.EndTable();
  }
};

struct TB_ResLoginBuilder {
  typedef TB_ResLogin Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ObjUserList(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TB_ObjUser>>> ObjUserList) {
    fbb_.AddOffset(TB_ResLogin::VT_OBJUSERLIST, ObjUserList);
  }
  explicit TB_ResLoginBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_ResLoginBuilder &operator=(const TB_ResLoginBuilder &);
  flatbuffers::Offset<TB_ResLogin> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_ResLogin>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_ResLogin> CreateTB_ResLogin(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TB_ObjUser>>> ObjUserList = 0) {
  TB_ResLoginBuilder builder_(_fbb);
  builder_.add_ObjUserList(ObjUserList);
  return builder_.Finish();
}

inline flatbuffers::Offset<TB_ResLogin> CreateTB_ResLoginDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<TB_ObjUser>> *ObjUserList = nullptr) {
  auto ObjUserList__ = ObjUserList ? _fbb.CreateVector<flatbuffers::Offset<TB_ObjUser>>(*ObjUserList) : 0;
  return CreateTB_ResLogin(
      _fbb,
      ObjUserList__);
}

struct TB_BcastEnterGameRoom FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_BcastEnterGameRoomBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJUSER = 4
  };
  const TB_ObjUser *ObjUser() const {
    return GetPointer<const TB_ObjUser *>(VT_OBJUSER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJUSER) &&
           verifier.VerifyTable(ObjUser()) &&
           verifier.EndTable();
  }
};

struct TB_BcastEnterGameRoomBuilder {
  typedef TB_BcastEnterGameRoom Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ObjUser(flatbuffers::Offset<TB_ObjUser> ObjUser) {
    fbb_.AddOffset(TB_BcastEnterGameRoom::VT_OBJUSER, ObjUser);
  }
  explicit TB_BcastEnterGameRoomBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_BcastEnterGameRoomBuilder &operator=(const TB_BcastEnterGameRoomBuilder &);
  flatbuffers::Offset<TB_BcastEnterGameRoom> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_BcastEnterGameRoom>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_BcastEnterGameRoom> CreateTB_BcastEnterGameRoom(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<TB_ObjUser> ObjUser = 0) {
  TB_BcastEnterGameRoomBuilder builder_(_fbb);
  builder_.add_ObjUser(ObjUser);
  return builder_.Finish();
}

struct TB_BcastExitGameRoom FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_BcastExitGameRoomBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJUSER = 4
  };
  const TB_ObjUser *ObjUser() const {
    return GetPointer<const TB_ObjUser *>(VT_OBJUSER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJUSER) &&
           verifier.VerifyTable(ObjUser()) &&
           verifier.EndTable();
  }
};

struct TB_BcastExitGameRoomBuilder {
  typedef TB_BcastExitGameRoom Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ObjUser(flatbuffers::Offset<TB_ObjUser> ObjUser) {
    fbb_.AddOffset(TB_BcastExitGameRoom::VT_OBJUSER, ObjUser);
  }
  explicit TB_BcastExitGameRoomBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_BcastExitGameRoomBuilder &operator=(const TB_BcastExitGameRoomBuilder &);
  flatbuffers::Offset<TB_BcastExitGameRoom> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_BcastExitGameRoom>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_BcastExitGameRoom> CreateTB_BcastExitGameRoom(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<TB_ObjUser> ObjUser = 0) {
  TB_BcastExitGameRoomBuilder builder_(_fbb);
  builder_.add_ObjUser(ObjUser);
  return builder_.Finish();
}

struct TB_InputMove FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_InputMoveBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FORWARDVECTOR = 4,
    VT_RIGHTVECTOR = 6,
    VT_MOVEFORWARD = 8,
    VT_MOVERIGHT = 10
  };
  const ST_Vec3 *ForwardVector() const {
    return GetStruct<const ST_Vec3 *>(VT_FORWARDVECTOR);
  }
  const ST_Vec3 *RightVector() const {
    return GetStruct<const ST_Vec3 *>(VT_RIGHTVECTOR);
  }
  float MoveForward() const {
    return GetField<float>(VT_MOVEFORWARD, 0.0f);
  }
  float MoveRight() const {
    return GetField<float>(VT_MOVERIGHT, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<ST_Vec3>(verifier, VT_FORWARDVECTOR) &&
           VerifyField<ST_Vec3>(verifier, VT_RIGHTVECTOR) &&
           VerifyField<float>(verifier, VT_MOVEFORWARD) &&
           VerifyField<float>(verifier, VT_MOVERIGHT) &&
           verifier.EndTable();
  }
};

struct TB_InputMoveBuilder {
  typedef TB_InputMove Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ForwardVector(const ST_Vec3 *ForwardVector) {
    fbb_.AddStruct(TB_InputMove::VT_FORWARDVECTOR, ForwardVector);
  }
  void add_RightVector(const ST_Vec3 *RightVector) {
    fbb_.AddStruct(TB_InputMove::VT_RIGHTVECTOR, RightVector);
  }
  void add_MoveForward(float MoveForward) {
    fbb_.AddElement<float>(TB_InputMove::VT_MOVEFORWARD, MoveForward, 0.0f);
  }
  void add_MoveRight(float MoveRight) {
    fbb_.AddElement<float>(TB_InputMove::VT_MOVERIGHT, MoveRight, 0.0f);
  }
  explicit TB_InputMoveBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_InputMoveBuilder &operator=(const TB_InputMoveBuilder &);
  flatbuffers::Offset<TB_InputMove> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_InputMove>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_InputMove> CreateTB_InputMove(
    flatbuffers::FlatBufferBuilder &_fbb,
    const ST_Vec3 *ForwardVector = 0,
    const ST_Vec3 *RightVector = 0,
    float MoveForward = 0.0f,
    float MoveRight = 0.0f) {
  TB_InputMoveBuilder builder_(_fbb);
  builder_.add_MoveRight(MoveRight);
  builder_.add_MoveForward(MoveForward);
  builder_.add_RightVector(RightVector);
  builder_.add_ForwardVector(ForwardVector);
  return builder_.Finish();
}

struct TB_ReqMove FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_ReqMoveBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERID = 4,
    VT_OPERATION = 6,
    VT_INPUTMOVE = 8
  };
  const flatbuffers::String *UserId() const {
    return GetPointer<const flatbuffers::String *>(VT_USERID);
  }
  OpMove Operation() const {
    return static_cast<OpMove>(GetField<int8_t>(VT_OPERATION, 0));
  }
  const TB_InputMove *InputMove() const {
    return GetPointer<const TB_InputMove *>(VT_INPUTMOVE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERID) &&
           verifier.VerifyString(UserId()) &&
           VerifyField<int8_t>(verifier, VT_OPERATION) &&
           VerifyOffset(verifier, VT_INPUTMOVE) &&
           verifier.VerifyTable(InputMove()) &&
           verifier.EndTable();
  }
};

struct TB_ReqMoveBuilder {
  typedef TB_ReqMove Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_UserId(flatbuffers::Offset<flatbuffers::String> UserId) {
    fbb_.AddOffset(TB_ReqMove::VT_USERID, UserId);
  }
  void add_Operation(OpMove Operation) {
    fbb_.AddElement<int8_t>(TB_ReqMove::VT_OPERATION, static_cast<int8_t>(Operation), 0);
  }
  void add_InputMove(flatbuffers::Offset<TB_InputMove> InputMove) {
    fbb_.AddOffset(TB_ReqMove::VT_INPUTMOVE, InputMove);
  }
  explicit TB_ReqMoveBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_ReqMoveBuilder &operator=(const TB_ReqMoveBuilder &);
  flatbuffers::Offset<TB_ReqMove> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_ReqMove>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_ReqMove> CreateTB_ReqMove(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> UserId = 0,
    OpMove Operation = OpMove_Start,
    flatbuffers::Offset<TB_InputMove> InputMove = 0) {
  TB_ReqMoveBuilder builder_(_fbb);
  builder_.add_InputMove(InputMove);
  builder_.add_UserId(UserId);
  builder_.add_Operation(Operation);
  return builder_.Finish();
}

inline flatbuffers::Offset<TB_ReqMove> CreateTB_ReqMoveDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *UserId = nullptr,
    OpMove Operation = OpMove_Start,
    flatbuffers::Offset<TB_InputMove> InputMove = 0) {
  auto UserId__ = UserId ? _fbb.CreateString(UserId) : 0;
  return CreateTB_ReqMove(
      _fbb,
      UserId__,
      Operation,
      InputMove);
}

struct TB_BcastMove FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_BcastMoveBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERID = 4,
    VT_OPERATION = 6,
    VT_INPUTMOVE = 8
  };
  const flatbuffers::String *UserId() const {
    return GetPointer<const flatbuffers::String *>(VT_USERID);
  }
  OpMove Operation() const {
    return static_cast<OpMove>(GetField<int8_t>(VT_OPERATION, 0));
  }
  const TB_InputMove *InputMove() const {
    return GetPointer<const TB_InputMove *>(VT_INPUTMOVE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERID) &&
           verifier.VerifyString(UserId()) &&
           VerifyField<int8_t>(verifier, VT_OPERATION) &&
           VerifyOffset(verifier, VT_INPUTMOVE) &&
           verifier.VerifyTable(InputMove()) &&
           verifier.EndTable();
  }
};

struct TB_BcastMoveBuilder {
  typedef TB_BcastMove Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_UserId(flatbuffers::Offset<flatbuffers::String> UserId) {
    fbb_.AddOffset(TB_BcastMove::VT_USERID, UserId);
  }
  void add_Operation(OpMove Operation) {
    fbb_.AddElement<int8_t>(TB_BcastMove::VT_OPERATION, static_cast<int8_t>(Operation), 0);
  }
  void add_InputMove(flatbuffers::Offset<TB_InputMove> InputMove) {
    fbb_.AddOffset(TB_BcastMove::VT_INPUTMOVE, InputMove);
  }
  explicit TB_BcastMoveBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_BcastMoveBuilder &operator=(const TB_BcastMoveBuilder &);
  flatbuffers::Offset<TB_BcastMove> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_BcastMove>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_BcastMove> CreateTB_BcastMove(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> UserId = 0,
    OpMove Operation = OpMove_Start,
    flatbuffers::Offset<TB_InputMove> InputMove = 0) {
  TB_BcastMoveBuilder builder_(_fbb);
  builder_.add_InputMove(InputMove);
  builder_.add_UserId(UserId);
  builder_.add_Operation(Operation);
  return builder_.Finish();
}

inline flatbuffers::Offset<TB_BcastMove> CreateTB_BcastMoveDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *UserId = nullptr,
    OpMove Operation = OpMove_Start,
    flatbuffers::Offset<TB_InputMove> InputMove = 0) {
  auto UserId__ = UserId ? _fbb.CreateString(UserId) : 0;
  return CreateTB_BcastMove(
      _fbb,
      UserId__,
      Operation,
      InputMove);
}

struct TB_ReqLocationSync FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_ReqLocationSyncBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERID = 4,
    VT_LOCATION = 6
  };
  const flatbuffers::String *UserId() const {
    return GetPointer<const flatbuffers::String *>(VT_USERID);
  }
  const ST_Vec3 *Location() const {
    return GetStruct<const ST_Vec3 *>(VT_LOCATION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERID) &&
           verifier.VerifyString(UserId()) &&
           VerifyField<ST_Vec3>(verifier, VT_LOCATION) &&
           verifier.EndTable();
  }
};

struct TB_ReqLocationSyncBuilder {
  typedef TB_ReqLocationSync Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_UserId(flatbuffers::Offset<flatbuffers::String> UserId) {
    fbb_.AddOffset(TB_ReqLocationSync::VT_USERID, UserId);
  }
  void add_Location(const ST_Vec3 *Location) {
    fbb_.AddStruct(TB_ReqLocationSync::VT_LOCATION, Location);
  }
  explicit TB_ReqLocationSyncBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_ReqLocationSyncBuilder &operator=(const TB_ReqLocationSyncBuilder &);
  flatbuffers::Offset<TB_ReqLocationSync> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_ReqLocationSync>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_ReqLocationSync> CreateTB_ReqLocationSync(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> UserId = 0,
    const ST_Vec3 *Location = 0) {
  TB_ReqLocationSyncBuilder builder_(_fbb);
  builder_.add_Location(Location);
  builder_.add_UserId(UserId);
  return builder_.Finish();
}

inline flatbuffers::Offset<TB_ReqLocationSync> CreateTB_ReqLocationSyncDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *UserId = nullptr,
    const ST_Vec3 *Location = 0) {
  auto UserId__ = UserId ? _fbb.CreateString(UserId) : 0;
  return CreateTB_ReqLocationSync(
      _fbb,
      UserId__,
      Location);
}

struct TB_BcastLocationSync FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TB_BcastLocationSyncBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERID = 4,
    VT_LOCATION = 6
  };
  const flatbuffers::String *UserId() const {
    return GetPointer<const flatbuffers::String *>(VT_USERID);
  }
  const ST_Vec3 *Location() const {
    return GetStruct<const ST_Vec3 *>(VT_LOCATION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERID) &&
           verifier.VerifyString(UserId()) &&
           VerifyField<ST_Vec3>(verifier, VT_LOCATION) &&
           verifier.EndTable();
  }
};

struct TB_BcastLocationSyncBuilder {
  typedef TB_BcastLocationSync Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_UserId(flatbuffers::Offset<flatbuffers::String> UserId) {
    fbb_.AddOffset(TB_BcastLocationSync::VT_USERID, UserId);
  }
  void add_Location(const ST_Vec3 *Location) {
    fbb_.AddStruct(TB_BcastLocationSync::VT_LOCATION, Location);
  }
  explicit TB_BcastLocationSyncBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TB_BcastLocationSyncBuilder &operator=(const TB_BcastLocationSyncBuilder &);
  flatbuffers::Offset<TB_BcastLocationSync> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TB_BcastLocationSync>(end);
    return o;
  }
};

inline flatbuffers::Offset<TB_BcastLocationSync> CreateTB_BcastLocationSync(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> UserId = 0,
    const ST_Vec3 *Location = 0) {
  TB_BcastLocationSyncBuilder builder_(_fbb);
  builder_.add_Location(Location);
  builder_.add_UserId(UserId);
  return builder_.Finish();
}

inline flatbuffers::Offset<TB_BcastLocationSync> CreateTB_BcastLocationSyncDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *UserId = nullptr,
    const ST_Vec3 *Location = 0) {
  auto UserId__ = UserId ? _fbb.CreateString(UserId) : 0;
  return CreateTB_BcastLocationSync(
      _fbb,
      UserId__,
      Location);
}

#endif  // FLATBUFFERS_GENERATED_TP_H_
